//counting the num with frequency more than n/2
public class Solution {
    public int majorityElement(int[] num) {

        int major=num[0], count = 1;
        for(int i=1; i<num.length;i++){
            if(count==0){
                count++;
                major=num[i];
            }else if(major==num[i]){
                count++;
            }else count--;

        }
        return major;
    }
}


// 1/2 Sorted Array
public class Solution {
    public int majorityElement(int[] nums) {
      
    Arrays.sort(nums);
    return nums[nums.length/2];

    }
}

//HashMap
public class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> dict = new HashMap<Integer, Integer>();
        for (int i : nums)
        {
            if(!dict.containsKey(i))
            {
                dict.put(i,1);
            }
            else
            {
                int k = dict.get(i);
                k++;
                dict.put(i,k);
            }
        }
        int max = 0;
        int maxi = 0;
        for (int i : dict.keySet())
        {
            if(dict.get(i)>max)
            {
                max = dict.get(i);
                maxi = i;
            }
        }
        return maxi;
    }
}
