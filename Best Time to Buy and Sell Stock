    //Kadane's Algorithm
    public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }

// use current mini point and temp profit
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length<1)
            return 0;
        int min = prices[0];
        int maxprofit = 0;
        for (int i = 0 ; i<prices.length; i++){
            if (prices[i] < min)
                min = prices[i];
            int between = prices[i] - min;
            if (between > maxprofit)
                maxprofit = between;
        }
        return maxprofit;
    }
}
